{"version":3,"sources":["images/img-three.jpg","images/img-two.jpg","images/menu.svg","images/cart.svg","images/img-one.jpg","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","categories","console","log","categoryData","this","setState","MyData","className","src","MenuIcon","CartIcon","map","category","key","headerTitle","imgOne","imgTwo","imgThree","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,uC,m/ECA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,yECA3CD,EAAOC,QAAU,IAA0B,kC,sOCsF5BC,E,4MA1EbC,MAAM,CACJC,WAAY,I,kEAGZC,QAAQC,IAAIC,GACZC,KAAKC,SAAS,CACZL,WAAYG,EAAaG,W,+BAK3B,OACE,yBAAKC,UAAU,aACb,gCACE,yBAAKA,UAAU,WAGf,yBAAKA,UAAU,WACX,4BACE,4BAAI,yBAAKC,IAAKC,OACd,4BAAI,0CACJ,4BAAI,yBAAKD,IAAKE,UAItB,yBAAKH,UAAU,oBACb,gDACA,yBAAKA,UAAU,eACZH,KAAKL,MAAMC,WAAaI,KAAKL,MAAMC,WAAWW,KAAI,SAACC,EAASC,GAE3D,OAAU,GAAPA,EACM,oCAAE,yBAAKA,IAAKA,EAAKN,UAAU,OAClC,iCAGA,4BAAKK,EAASE,cAEhB,yBAAKP,UAAU,cAAa,yBAAKC,IAAKO,QAE5B,GAAPF,EACM,oCAAE,yBAAKA,IAAKA,EAAKN,UAAU,OAClC,iCAGA,4BAAKK,EAASE,cAEhB,yBAAKP,UAAU,cAAa,yBAAKC,IAAKQ,QAE5B,GAAPH,EACM,oCAAE,yBAAKA,IAAKA,EAAKN,UAAU,OAClC,iCAEA,4BAAKK,EAASE,cAEhB,yBAAKP,UAAU,cAAa,yBAAKC,IAAKS,QAE9B,yBAAKJ,IAAKA,EAAKN,UAAU,OACjC,iCAGA,4BAAKK,EAASE,iBAEZ,KACHV,KAAKL,MAAMC,YAA6C,GAAhCI,KAAKL,MAAMC,WAAWkB,OAAc,oCAAE,yBAAKX,UAAU,cAAa,yBAAKC,IAAKQ,OAAe,yBAAKT,UAAU,cAAa,yBAAKC,IAAKS,QAA4B,KACrLb,KAAKL,MAAMC,YAA6C,GAAhCI,KAAKL,MAAMC,WAAWkB,OAAc,oCAAE,yBAAKX,UAAU,cAAa,yBAAKC,IAAKS,QAA4B,Y,GAjE3HE,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.c2344575.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img-three.406580c2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img-two.436d396d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/menu.b7808767.svg\";","module.exports = __webpack_public_path__ + \"static/media/cart.6ca68a8c.svg\";","module.exports = __webpack_public_path__ + \"static/media/img-one.80298ec2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport categoryData from './item_list.json';\nimport MenuIcon from './images/menu.svg';\nimport CartIcon from './images/cart.svg';\nimport imgOne from './images/img-one.jpg';\nimport imgTwo from './images/img-two.jpg';\nimport imgThree from './images/img-three.jpg';\n\n\nclass App extends Component {\n  state={\n    categories: ''\n  }\n  componentDidMount(){\n    console.log(categoryData)\n    this.setState({\n      categories: categoryData.MyData\n    })\n\n  }\n  render(){\n    return(\n      <div className=\"home-page\">\n        <header>\n          <div className=\"topbar\">\n\n          </div>\n          <div className=\"mainbar\">\n              <ul>\n                <li><img src={MenuIcon}/></li>\n                <li><h2>Color Lab</h2></li>\n                <li><img src={CartIcon}/></li>\n              </ul>\n          </div>\n        </header>\n        <div className=\"category-section\">\n          <h1>Shop By Category</h1>\n          <div className=\"box-section\">\n            {this.state.categories ? this.state.categories.map((category,key) => {\n             \n              if(key == 1){\n                return <><div key={key} className=\"box\">\n                <figure>\n                    \n                </figure>\n                <h2>{category.headerTitle}</h2>\n              </div>\n              <div className=\"banner-box\"><img src={imgOne}/></div></>\n              }\n              if(key == 3){\n                return <><div key={key} className=\"box\">\n                <figure>\n                    \n                </figure>\n                <h2>{category.headerTitle}</h2>\n              </div>\n              <div className=\"banner-box\"><img src={imgTwo}/></div></>\n              }\n              if(key == 5){\n                return <><div key={key} className=\"box\">\n                <figure>\n                </figure>\n                <h2>{category.headerTitle}</h2>\n              </div>\n              <div className=\"banner-box\"><img src={imgThree}/></div></>\n              }\n              return  <div key={key} className=\"box\">\n              <figure>\n  \n              </figure>\n              <h2>{category.headerTitle}</h2>\n            </div>    \n            }): null }\n            {this.state.categories ? this.state.categories.length == 2 ? <><div className=\"banner-box\"><img src={imgTwo}/></div><div className=\"banner-box\"><img src={imgThree}/></div></> : null:null }\n            {this.state.categories ? this.state.categories.length == 4 ? <><div className=\"banner-box\"><img src={imgThree}/></div></> : null:null }\n          </div>\n          \n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}